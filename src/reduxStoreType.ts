import { ReducerType } from "./reducerCreator";

/**
 * The Reducer definition
 */
export interface IReducers {
  [key: string]: ReducerType;
}

/**
 * The type of the reducer which is generated by `Redux` API `combineReducers()`.
 */
export type ReducerState<T extends IReducers = {}> = {
  [K in keyof T]: ReturnType<T[K]>;
};

export type ReducerStateKeyType<T extends ReducerState> = keyof T;
export type ReducerStateValueType<
  T extends ReducerState
> = T[ReducerStateKeyType<T>];

/**
 * The whole redux store type.
 * `RootReducerState` is the state of the static reducer which is exist when the project started.
 * `AsyncReducerState` is the state of the reducer injected lazily.To inject it,
 * use `Redux` API `combineReducers()` to combine the root reducer and async reducer
 * as one, then use `Redux` API `replaceReducer()` to refresh it.
 * if you have async reducer, be sure the reducer
 * has been injected when you call it.
 */
export type StoreState<
  RootReducerState extends ReducerState,
  AsyncReducerState extends ReducerState
> = {
  [K in keyof RootReducerState | keyof AsyncReducerState]: (RootReducerState &
    AsyncReducerState)[K];
};
